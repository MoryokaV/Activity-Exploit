#!/usr/bin/env python3

from datetime import datetime
from mss import mss
import numpy as np
from PIL import Image
import pickle

class Screenshot():
    def __init__(self, sock):
        self.sock = sock

    def take_screenshot(self):
        #selecting the area of the screen to be captured
        trigger = {'top': 0, 'left': 0, 'width': 1280, 'height': 720}
        
        #taking screenshot
        screen = np.array(mss().grab(trigger))
        data = pickle.dumps(screen) #serialize

        #send screenshot to server
        while True:
            status = self.sock.recv(1024).decode()
            
            if status == "SIZE":
                self.sock.send(str(len(data)).encode())
            elif status == "STREAM":
                self.sock.sendall(data)  
            elif status == "STOP":
                break
        
    def download_screenshot(self):
        conn = self.sock

        print("\nGathering information...")
        conn.send("SIZE".encode())
        filesize = int(conn.recv(1024).decode())
        
        date = datetime.now().strftime("%d-%m-%Y %H'%M'%S")
        filename = "Screenshot_" + date + ".png"   

        print("Allocating memory...") 
        conn.send("STREAM".encode())
        
        data = b''
        while len(data) < filesize:
            data += conn.recv(8192) #8Kb chunk

            print("{0:.2f}".format((len(data)/float(filesize)) * 100) + "% Done...", end = "\r")
        
        #save bytes to disk
        img = Image.fromarray(pickle.loads(data))
        img.save(filename)

        print("\nScreenshot received!\n")
        conn.send("STOP".encode('utf-8'))
